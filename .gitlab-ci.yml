# Branch types and jobs:
# feature/hotfix : build + tests
# develop : build + tests + deliver (flag as successful here for MRs) + generate + deployments + load-elevation-data
# release : build + tests + deliver (flag as successful here for MRs) + generate + deployments + load-elevation-data
# tags : deliver + generate + deployments + load-elevation-data

# This is the only bit of magic here, never touch this unless you wanna do fancy stuff
# It basically says "Don't create multiple pipelines on MRs for no reason"
default:
  image: docker:latest

variables:
  REGISTRY_NAMESPACE: $CI_REGISTRY/$CI_PROJECT_NAMESPACE
  IMAGE_AUTH: $CI_REGISTRY_IMAGE/octopus-core-auth
  IMAGE_AUTH_COMMIT: $CI_REGISTRY_IMAGE/octopus-core-auth:$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID
  IMAGE_GATEWAY: $CI_REGISTRY_IMAGE/octopus-core-gateway
  IMAGE_GATEWAY_COMMIT: $CI_REGISTRY_IMAGE/octopus-core-gateway:$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID
  IMAGE_MESSAGE: $CI_REGISTRY_IMAGE/octopus-core-message
  IMAGE_MESSAGE_COMMIT: $CI_REGISTRY_IMAGE/dacadoo-core-message:$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID
  IMAGE_MAIL: $CI_REGISTRY_IMAGE/octopus-core-mail
  IMAGE_MAIL_COMMIT: $CI_REGISTRY_IMAGE/octopus-core-mail:$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID
  IMAGE_WORKSPACE: $CI_REGISTRY_IMAGE/octopus-core-workspace
  IMAGE_WORKSPACE_COMMIT: $CI_REGISTRY_IMAGE/octopus-core-workspace:$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID
  IMAGE_STORAGE: $CI_REGISTRY_IMAGE/octopus-core-storage
  IMAGE_STORAGE_COMMIT: $CI_REGISTRY_IMAGE/octopus-core-storage:$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID
  IMAGE_EUREKA: $CI_REGISTRY_IMAGE/octopus-core-eureka
  IMAGE_EUREKA_COMMIT: $CI_REGISTRY_IMAGE/octopus-core-eureka:$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always

include:
  - deployment/common.yml

.except-tags:
  rules:
    - if: '$CI_COMMIT_TAG != null'
      when: never
    - when: on_success

.release-develop-or-tag:
  only:
    refs:
      - develop
      - /^release.*/
      - tags

stages:
  - build
  - deliver-gitlab
  - deploy

build:
  stage: build
  extends:
    - .except-tags
    - .docker
  variables:
    BUILD_ID: $CI_COMMIT_SHORT_SHA-build$CI_JOB_ID
    TAG: $CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID
    GIT_SHA: $CI_COMMIT_SHORT_SHA
  script:
    - echo $REGISTRY_NAMESPACE

# deliver-gitlab:
#   stage: deliver-gitlab
#   extends:
#     - .release-develop-or-tag
#     - .docker
#   variables:
#     BUILD_ID: $CI_COMMIT_SHORT_SHA
#     BASE_PATH: $CI_REGISTRY_IMAGE/octopus-core
#     BUILD_IMAGE: $BASE_PATH:$BUILD_ID-build
#     TARGET_IMAGE: $BASE_PATH:$BUILD_ID

# deploy-dev:
#   stage: deploy
#   environment: dev
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."

# deploy-prod:
#   stage: deploy
#   environment: prod
