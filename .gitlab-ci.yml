# Branch types and jobs:
# feature/hotfix : build + tests
# develop : build + tests + deliver (flag as successful here for MRs) + generate + deployments + load-elevation-data
# release : build + tests + deliver (flag as successful here for MRs) + generate + deployments + load-elevation-data
# tags : deliver + generate + deployments + load-elevation-data

# This is the only bit of magic here, never touch this unless you wanna do fancy stuff
# It basically says "Don't create multiple pipelines on MRs for no reason"

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always

include:
  - deployment/common.yml

.except-tags:
  rules:
    - if: '$CI_COMMIT_TAG != null'
      when: never
    - when: on_success

.release-develop-or-tag:
  only:
    refs:
      - develop
      - /^release.*/
      - tags

stages:
  - build
  - deliver-gitlab
  - deploy

build:
  stage: build
  extends:
    - .except-tags
    - .docker
  variables:
    BUILD_ID: $CI_COMMIT_SHORT_SHA
    BASE_PATH: $CI_REGISTRY_IMAGE/octopus-core
    BUILD_IMAGE: $BASE_PATH:$BUILD_ID-build
    DEVELOP_BUILD_IMAGE: $BASE_PATH:develop-build
  script:
    - echo $BUILD_ID
    - echo $BASE_PATH
    - echo $BUILD_IMAGE
    # - docker manifest inspect $BUILD_PATH > /dev/null && { echo "image already exists - skipping build"; exit 0; }
    # - BRANCH_BUILD_IMAGE=$BASE_PATH:$(echo $CI_COMMIT_BRANCH | sed 's/\//-/g')-build
    # - docker buildx build
    #   --load
    #   -f docker/Dockerfile
    #   --build-arg BUILDKIT_INLINE_CACHE=1
    #   --build-arg BUILD_ID=$BUILD_ID
    #   --cache-to type=registry,ref=$BRANCH_BUILD_IMAGE,mode=max
    #   --cache-from type=registry,ref=$BRANCH_BUILD_IMAGE
    #   --cache-from type=registry,ref=$DEVELOP_BUILD_IMAGE
    #   --target=runtime
    #   -t $BUILD_IMAGE
    #   -t $BRANCH_BUILD_IMAGE .
    # - echo "Compile complete."

# deliver-gitlab:
#   stage: deliver-gitlab
#   extends:
#     - .release-develop-or-tag
#     - .docker
#   variables:
#     BUILD_ID: $CI_COMMIT_SHORT_SHA
#     BASE_PATH: $CI_REGISTRY_IMAGE/octopus-core
#     BUILD_IMAGE: $BASE_PATH:$BUILD_ID-build
#     TARGET_IMAGE: $BASE_PATH:$BUILD_ID

# deploy-dev:
#   stage: deploy
#   environment: dev
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."

# deploy-prod:
#   stage: deploy
#   environment: prod
