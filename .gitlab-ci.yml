# Branch types and jobs:
# feature/hotfix : build + tests
# develop : build + tests + deliver (flag as successful here for MRs) + generate + deployments + load-elevation-data
# release : build + tests + deliver (flag as successful here for MRs) + generate + deployments + load-elevation-data
# tags : deliver + generate + deployments + load-elevation-data

# This is the only bit of magic here, never touch this unless you wanna do fancy stuff
# It basically says "Don't create multiple pipelines on MRs for no reason"

variables:
  IMAGE_AUTH_NAME: octopus-core-auth
  IMAGE_AUTH: $CI_REGISTRY_IMAGE/$IMAGE_AUTH_NAME
  IMAGE_GATEWAY_NAME: octopus-core-gateway
  IMAGE_GATEWAY: $CI_REGISTRY_IMAGE/$IMAGE_GATEWAY_NAME
  IMAGE_MESSAGE_NAME: octopus-core-message
  IMAGE_MESSAGE: $CI_REGISTRY_IMAGE/$IMAGE_MESSAGE_NAME
  IMAGE_MAIL_NAME: octopus-core-mail
  IMAGE_MAIL: $CI_REGISTRY_IMAGE/$IMAGE_MAIL_NAME
  IMAGE_EUREKA_NAME: octopus-core-eureka
  IMAGE_EUREKA: $CI_REGISTRY_IMAGE/$IMAGE_EUREKA_NAME
  IMAGE_WORKSPACE_NAME: octopus-core-workspace
  IMAGE_WORKSPACE: $CI_REGISTRY_IMAGE/$IMAGE_WORKSPACE_NAME
  IMAGE_STORAGE_NAME: octopus-core-storage
  IMAGE_STORAGE: $CI_REGISTRY_IMAGE/$IMAGE_STORAGE_NAME

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always

include:
  - deployment/common.yml
  - deployment/base.yml

.except-tags:
  rules:
    - if: '$CI_COMMIT_TAG != null'
      when: never
    - when: on_success

.release-develop-or-tag:
  only:
    refs:
      - dev
      - /^release.*/
      - tags

stages:
  - maven-build
  - build
  - deliver-gitlab
  - deploy

maven-build:
  stage: maven-build
  extends:
    - .maven
  script:
    - mvn clean package
  artifacts:
    when: on_success
    paths:
      - "**/target/*.jar"
    expire_in: 1 day

build:
  stage: build
  extends:
    - .except-tags
    - .docker
  variables:
    BUILD_ID: $CI_COMMIT_SHORT_SHA
    TAG: $BUILD_ID-build
  script:
    - docker-compose build
    - docker tag eureka:$TAG $IMAGE_EUREKA:$TAG
    - docker push $IMAGE_EUREKA:$TAG
    - docker tag gateway:$TAG $IMAGE_GATEWAY:$TAG
    - docker push $IMAGE_GATEWAY:$TAG
    - docker tag auth:$TAG $IMAGE_AUTH:$TAG
    - docker push $IMAGE_AUTH:$TAG
    - docker tag message:$TAG $IMAGE_MESSAGE:$TAG
    - docker push $IMAGE_MESSAGE:$TAG
    - docker tag mail:$TAG $IMAGE_MAIL:$TAG
    - docker push $IMAGE_MAIL:$TAG
    - docker tag workspace:$TAG $IMAGE_WORKSPACE:$TAG
    - docker push $IMAGE_WORKSPACE:$TAG
    - docker tag storage:$TAG $IMAGE_STORAGE:$TAG
    - docker push $IMAGE_STORAGE:$TAG

deliver-gitlab:
  stage: deliver-gitlab
  extends:
    - .release-develop-or-tag
    - .docker
  variables:
    BUILD_ID: $CI_COMMIT_SHORT_SHA
    SRC_TAG: $BUILD_ID-build
    TARGET_TAG: $BUILD_ID
  script:
    # octopus-core-eureka
    - SRC_EUREKA_IMAGE=$IMAGE_EUREKA:$SRC_TAG
    - DST_EUREKA_IMAGE=$IMAGE_EUREKA:$TARGET_TAG
    - docker pull $SRC_EUREKA_IMAGE
    - EUREKA_SHORT_SHA=`docker inspect --format '{{ index .Config.Labels "core.git.sha" }}' $SRC_EUREKA_IMAGE`
    # octopus-core-gateway
    - SRC_GATEWAY_IMAGE=$IMAGE_GATEWAY:$SRC_TAG
    - DST_GATEWAY_IMAGE=$IMAGE_GATEWAY:$TARGET_TAG
    - docker pull $SRC_GATEWAY_IMAGE
    - GATEWAY_SHORT_SHA=`docker inspect --format '{{ index .Config.Labels "core.git.sha" }}' $SRC_GATEWAY_IMAGE`
    # octopus-core-auth
    - SRC_AUTH_IMAGE=$IMAGE_AUTH:$SRC_TAG
    - DST_AUTH_IMAGE=$IMAGE_AUTH:$TARGET_TAG
    - docker pull $SRC_AUTH_IMAGE
    - AUTH_SHORT_SHA=`docker inspect --format '{{ index .Config.Labels "core.git.sha" }}' $SRC_AUTH_IMAGE`
    # octopus-core-message
    - SRC_MESSAGE_IMAGE=$IMAGE_MESSAGE:$SRC_TAG
    - DST_MESSAGE_IMAGE=$IMAGE_MESSAGE:$TARGET_TAG
    - docker pull $SRC_MESSAGE_IMAGE
    - MESSAGE_SHORT_SHA=`docker inspect --format '{{ index .Config.Labels "core.git.sha" }}' $SRC_MESSAGE_IMAGE`
    # octopus-core-mail
    - SRC_MAIL_IMAGE=$IMAGE_MAIL:$SRC_TAG
    - DST_MAIL_IMAGE=$IMAGE_MAIL:$TARGET_TAG
    - docker pull $SRC_MAIL_IMAGE
    - MAIL_SHORT_SHA=`docker inspect --format '{{ index .Config.Labels "core.git.sha" }}' $SRC_MAIL_IMAGE`
    # octopus-core-workspace
    - SRC_WORKSPACE_IMAGE=$IMAGE_WORKSPACE:$SRC_TAG
    - DST_WORKSPACE_IMAGE=$IMAGE_WORKSPACE:$TARGET_TAG
    - docker pull $SRC_WORKSPACE_IMAGE
    - WORKSPACE_SHORT_SHA=`docker inspect --format '{{ index .Config.Labels "core.git.sha" }}' $SRC_WORKSPACE_IMAGE`
    # octopus-core-storage
    - SRC_STORAGE_IMAGE=$IMAGE_STORAGE:$SRC_TAG
    - DST_STORAGE_IMAGE=$IMAGE_STORAGE:$TARGET_TAG
    - docker pull $SRC_STORAGE_IMAGE
    - STORAGE_SHORT_SHA=`docker inspect --format '{{ index .Config.Labels "core.git.sha" }}' $SRC_STORAGE_IMAGE`
    # verify the correct image was pulled
    - test $EUREKA_SHORT_SHA == $CI_COMMIT_SHORT_SHA ||
      { echo "$CI_COMMIT_SHORT_SHA Docker image octopus-core-eureka $EUREKA_SHORT_SHA was built on a different code base - branches are incorrectly merged" >&2; exit 1; }
    - test $GATEWAY_SHORT_SHA == $CI_COMMIT_SHORT_SHA ||
      { echo "$CI_COMMIT_SHORT_SHA Docker image octopus-core-gateway $GATEWAY_SHORT_SHA was built on a different code base - branches are incorrectly merged" >&2; exit 1; }
    - test $AUTH_SHORT_SHA == $CI_COMMIT_SHORT_SHA ||
      { echo "$CI_COMMIT_SHORT_SHA Docker image octopus-core-auth $AUTH_SHORT_SHA was built on a different code base - branches are incorrectly merged" >&2; exit 1; }
    - test $MESSAGE_SHORT_SHA == $CI_COMMIT_SHORT_SHA ||
      { echo "$CI_COMMIT_SHORT_SHA Docker image octopus-core-message $MESSAGE_SHORT_SHA was built on a different code base - branches are incorrectly merged" >&2; exit 1; }
    - test $MAIL_SHORT_SHA == $CI_COMMIT_SHORT_SHA ||
      { echo "$CI_COMMIT_SHORT_SHA Docker image octopus-core-mail $MAIL_SHORT_SHA was built on a different code base - branches are incorrectly merged" >&2; exit 1; }
    - test $WORKSPACE_SHORT_SHA == $CI_COMMIT_SHORT_SHA ||
      { echo "$CI_COMMIT_SHORT_SHA Docker image octopus-core-workspace $WORKSPACE_SHORT_SHA was built on a different code base - branches are incorrectly merged" >&2; exit 1; }
    - test $STORAGE_SHORT_SHA == $CI_COMMIT_SHORT_SHA ||
      { echo "$CI_COMMIT_SHORT_SHA Docker image octopus-core-storage $STORAGE_SHORT_SHA was built on a different code base - branches are incorrectly merged" >&2; exit 1; }
    # tag and push
    - docker tag $SRC_EUREKA_IMAGE $DST_EUREKA_IMAGE
    - docker push $DST_EUREKA_IMAGE
    - docker tag $SRC_GATEWAY_IMAGE $DST_GATEWAY_IMAGE
    - docker push $DST_GATEWAY_IMAGE
    - docker tag $SRC_AUTH_IMAGE $DST_AUTH_IMAGE
    - docker push $DST_AUTH_IMAGE
    - docker tag $SRC_MESSAGE_IMAGE $DST_MESSAGE_IMAGE
    - docker push $DST_MESSAGE_IMAGE
    - docker tag $SRC_MAIL_IMAGE $DST_MAIL_IMAGE
    - docker push $DST_MAIL_IMAGE
    - docker tag $SRC_WORKSPACE_IMAGE $DST_WORKSPACE_IMAGE
    - docker push $DST_WORKSPACE_IMAGE
    - docker tag $SRC_STORAGE_IMAGE $DST_STORAGE_IMAGE
    - docker push $DST_STORAGE_IMAGE

deploy:
  stage: deploy
  allow_failure: true
  extends:
    - .release-develop-or-tag
    - .deploy
  when: on_success


